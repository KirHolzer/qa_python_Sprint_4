{"name": "Проверка ошибки на валидацию поля \"* Адрес: куда привезти заказ\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: Given xpath expression \".//div[text() = 'Введите корректный адрес]\" is invalid: SyntaxError: Document.evaluate: The expression is not a legal expression; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:180:5\nInvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:340:5\nfind_@chrome://remote/content/marionette/element.sys.mjs:303:11\nelement.find/</findElements<@chrome://remote/content/marionette/element.sys.mjs:257:24\nevalFn@chrome://remote/content/marionette/sync.sys.mjs:118:7\nPollPromise/<@chrome://remote/content/marionette/sync.sys.mjs:138:5\nPollPromise@chrome://remote/content/marionette/sync.sys.mjs:109:10\nelement.find/<@chrome://remote/content/marionette/element.sys.mjs:255:24\nelement.find@chrome://remote/content/marionette/element.sys.mjs:254:10\nfindElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:238:25\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:94:31", "trace": "self = <test_order_page.TestOrderPage object at 0x10e5b4c10>, browser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"e9f7d438-ec57-4c95-a71d-ab23a767a4f9\")>\n\n    @allure.title('Проверка ошибки на валидацию поля \"* Адрес: куда привезти заказ\"')\n    @allure.description('Оставить поле \"* Адрес: куда привезти заказ\" пустым и кликнуть \"Далее\"')\n    def test_validate_error_by_input_delivery_address(self, browser):\n        OrderPage(browser).open_order_url()\n        OrderPage(browser).click_on_button_forward()\n        WebDriverWait(browser, 10).until(\n            expected_conditions.presence_of_element_located(OrderPageLocators.VALIDATE_ERROR_FIRST_NAME))\n        expected_text = 'Введите корректный адрес'\n>       assert OrderPage(browser).find_text(OrderPageLocators.VALIDATE_ERROR_DELIVERY_ADDRESS) == expected_text\n\ntests/test_order_page.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:30: in find_text\n    return self.driver.find_element(*element).text\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:740: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e7b4b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Given xpath expression \\\\\".//div[text() = \\'...sys.mjs:238:25\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:94:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: Given xpath expression \".//div[text() = 'Введите корректный адрес]\" is invalid: SyntaxError: Document.evaluate: The expression is not a legal expression; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:180:5\nE       InvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:340:5\nE       find_@chrome://remote/content/marionette/element.sys.mjs:303:11\nE       element.find/</findElements<@chrome://remote/content/marionette/element.sys.mjs:257:24\nE       evalFn@chrome://remote/content/marionette/sync.sys.mjs:118:7\nE       PollPromise/<@chrome://remote/content/marionette/sync.sys.mjs:138:5\nE       PollPromise@chrome://remote/content/marionette/sync.sys.mjs:109:10\nE       element.find/<@chrome://remote/content/marionette/element.sys.mjs:255:24\nE       element.find@chrome://remote/content/marionette/element.sys.mjs:254:10\nE       findElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:238:25\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:94:31\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSelectorException"}, "description": "Оставить поле \"* Адрес: куда привезти заказ\" пустым и кликнуть \"Далее\"", "steps": [{"name": "Открыть страницу заказа", "status": "passed", "start": 1689506963671, "stop": 1689506964646}, {"name": "Кликнуть на кнопку \"Далее\"", "status": "passed", "start": 1689506964646, "stop": 1689506964861}], "start": 1689506963671, "stop": 1689506964868, "uuid": "eb16b356-ac85-4f74-821a-add19a55f7f2", "historyId": "7786345a741afd701a896b84acf8253b", "testCaseId": "7786345a741afd701a896b84acf8253b", "fullName": "tests.test_order_page.TestOrderPage#test_validate_error_by_input_delivery_address", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_page"}, {"name": "subSuite", "value": "TestOrderPage"}, {"name": "host", "value": "MacBook-Pro-Kirill.local"}, {"name": "thread", "value": "49350-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_page"}]}